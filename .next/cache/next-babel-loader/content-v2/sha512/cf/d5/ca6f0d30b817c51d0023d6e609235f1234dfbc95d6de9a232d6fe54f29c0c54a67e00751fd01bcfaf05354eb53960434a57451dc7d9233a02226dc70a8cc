{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\NLW04\\\\Projeto01\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 11\n  }, this);\n}\n\n_s(ChallengesProvider, \"lIgE7IFKF0067ZYEERnSVPjxmqw=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/NLW04/Projeto01/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge","setActiveChallenge","activeChallenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAsBP,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAE3CJ,QAAQ,CAAC,CAAD,CAFmC;AAAA,MAE9DK,KAF8D;AAAA,MAEvDC,QAFuD;;AAAA,mBAGnBN,QAAQ,CAAC,CAAD,CAHW;AAAA,MAG9DO,iBAH8D;AAAA,MAG3CC,oBAH2C;;AAAA,mBAIfR,QAAQ,CAAC,CAAD,CAJO;AAAA,MAI9DS,mBAJ8D;AAAA,MAIzCC,sBAJyC;;AAOrE,WAASC,OAAT,GAAmB;AACdL,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACJ;;AAED,WAASO,iBAAT,GAA6B;AACxB,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBf,UAAU,CAACgB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGjB,UAAU,CAACY,oBAAD,CAA5B;AAEAM,IAAAA,kBAAkB,CAACD,SAAD,CAAlB;AACJ;;AAED,sBACK,QAAC,iBAAD,CAAmB,QAAnB;AACK,IAAA,KAAK,EAAE;AACFb,MAAAA,KAAK,EAALA,KADE;AAEFE,MAAAA,iBAAiB,EAAjBA,iBAFE;AAGFE,MAAAA,mBAAmB,EAAnBA,mBAHE;AAIFE,MAAAA,OAAO,EAAPA,OAJE;AAKFC,MAAAA,iBAAiB,EAAjBA,iBALE;AAMFQ,MAAAA,eAAe,EAAfA;AANE,KADZ;AAAA,cASMhB;AATN;AAAA;AAAA;AAAA;AAAA,UADL;AAaJ;;GA/BeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\ninterface ChallengesProviderProps {\r\n     children: ReactNode;\r\n}\r\n\r\ninterface challenge {\r\n     type: 'body' | 'eye';\r\n     description: string;\r\n     amount: number;\r\n\r\n}\r\n\r\ninterface ChallengesContextData {\r\n     level: number;\r\n     currentExperience: number;\r\n     challengesCompleted: number;\r\n     levelUp: () => void;\r\n     startNewChallenge: () => void;\r\n     activeChallenge: object;\r\n}\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n\r\n     const [level, setLevel] = useState(1);\r\n     const [currentExperience, setCurrentExperience] = useState(0);\r\n     const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n\r\n     function levelUp() {\r\n          setLevel(level + 1);\r\n     }\r\n\r\n     function startNewChallenge() {\r\n          const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n          const challenge = challenges[randomChallengeIndex];\r\n\r\n          setActiveChallenge(challenge);\r\n     }\r\n\r\n     return (\r\n          <ChallengesContext.Provider\r\n               value={{\r\n                    level,\r\n                    currentExperience,\r\n                    challengesCompleted,\r\n                    levelUp,\r\n                    startNewChallenge,\r\n                    activeChallenge\r\n               }}>\r\n               {children}\r\n          </ChallengesContext.Provider>\r\n     );\r\n}"]},"metadata":{},"sourceType":"module"}