{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\NLW04\\\\Projeto01\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission === 'granted') {}\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      experienceToNextLevel: experienceToNextLevel,\n      completeChallenge: completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 11\n  }, this);\n}\n\n_s(ChallengesProvider, \"mXQLPpEuqfijIicM0DJuMSLmJHY=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/NLW04/Projeto01/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","permission","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,OAAO,IAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAwBP,OAAO,SAASK,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAE3CL,QAAQ,CAAC,CAAD,CAFmC;AAAA,MAE9DM,KAF8D;AAAA,MAEvDC,QAFuD;;AAAA,mBAGnBP,QAAQ,CAAC,CAAD,CAHW;AAAA,MAG9DQ,iBAH8D;AAAA,MAG3CC,oBAH2C;;AAAA,mBAIfT,QAAQ,CAAC,CAAD,CAJO;AAAA,MAI9DU,mBAJ8D;AAAA,MAIzCC,sBAJyC;;AAAA,mBAMvBX,QAAQ,CAAC,IAAD,CANe;AAAA,MAM9DY,eAN8D;AAAA,MAM7CC,kBAN6C;;AAQrE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;AAEAL,EAAAA,SAAS,CAAC,YAAM;AACXgB,IAAAA,YAAY,CAACC,iBAAb;AACJ,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,OAAT,GAAmB;AACdZ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACJ;;AAED,WAASc,iBAAT,GAA6B;AACxB,QAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AAIAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;;AAEA,QAAIR,YAAY,CAACS,UAAb,KAA4B,SAAhC,EAA2C,CAE1C;AAEL;;AAED,WAASC,cAAT,GAA0B;AACrBd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACJ;;AAED,WAASe,iBAAT,GAA6B;AACxB,QAAI,CAAChB,eAAL,EAAsB;AACjB;AACJ;;AAHuB,QAKhBiB,MALgB,GAKLjB,eALK,CAKhBiB,MALgB;AAOxB,QAAIC,eAAe,GAAGtB,iBAAiB,GAAGqB,MAA1C;;AAEA,QAAIC,eAAe,IAAIhB,qBAAvB,EAA8C;AACzCgB,MAAAA,eAAe,GAAGA,eAAe,GAAGhB,qBAApC;AACAK,MAAAA,OAAO;AACX;;AAEDV,IAAAA,oBAAoB,CAACqB,eAAD,CAApB;AACAjB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AAEJ;;AAGD,sBACK,QAAC,iBAAD,CAAmB,QAAnB;AACK,IAAA,KAAK,EAAE;AACFJ,MAAAA,KAAK,EAALA,KADE;AAEFE,MAAAA,iBAAiB,EAAjBA,iBAFE;AAGFE,MAAAA,mBAAmB,EAAnBA,mBAHE;AAIFS,MAAAA,OAAO,EAAPA,OAJE;AAKFC,MAAAA,iBAAiB,EAAjBA,iBALE;AAMFR,MAAAA,eAAe,EAAfA,eANE;AAOFe,MAAAA,cAAc,EAAdA,cAPE;AAQFb,MAAAA,qBAAqB,EAArBA,qBARE;AASFc,MAAAA,iBAAiB,EAAjBA;AATE,KADZ;AAAA,cAYMvB;AAZN;AAAA;AAAA;AAAA;AAAA,UADL;AAgBJ;;GAzEeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\ninterface ChallengesProviderProps {\r\n     children: ReactNode;\r\n}\r\n\r\ninterface Challenge {\r\n     type: 'body' | 'eye';\r\n     description: string;\r\n     amount: number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n     level: number;\r\n     currentExperience: number;\r\n     challengesCompleted: number;\r\n     experienceToNextLevel: number;\r\n     activeChallenge: Challenge;\r\n     levelUp: () => void;\r\n     startNewChallenge: () => void;\r\n     resetChallenge: () => void;\r\n     completeChallenge: () => void;\r\n}\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n\r\n     const [level, setLevel] = useState(1);\r\n     const [currentExperience, setCurrentExperience] = useState(0);\r\n     const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n     const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n     const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n     useEffect(() => {\r\n          Notification.requestPermission();\r\n     }, [])\r\n\r\n     function levelUp() {\r\n          setLevel(level + 1);\r\n     }\r\n\r\n     function startNewChallenge() {\r\n          const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n          const challenge = challenges[randomChallengeIndex];\r\n\r\n\r\n\r\n          setActiveChallenge(challenge);\r\n\r\n          if (Notification.permission === 'granted') {\r\n\r\n          }\r\n\r\n     }\r\n\r\n     function resetChallenge() {\r\n          setActiveChallenge(null);\r\n     }\r\n\r\n     function completeChallenge() {\r\n          if (!activeChallenge) {\r\n               return;\r\n          }\r\n\r\n          const { amount } = activeChallenge;\r\n\r\n          let finalExperience = currentExperience + amount;\r\n\r\n          if (finalExperience >= experienceToNextLevel) {\r\n               finalExperience = finalExperience - experienceToNextLevel;\r\n               levelUp();\r\n          }\r\n\r\n          setCurrentExperience(finalExperience);\r\n          setActiveChallenge(null);\r\n          setChallengesCompleted(challengesCompleted + 1);\r\n\r\n     }\r\n\r\n\r\n     return (\r\n          <ChallengesContext.Provider\r\n               value={{\r\n                    level,\r\n                    currentExperience,\r\n                    challengesCompleted,\r\n                    levelUp,\r\n                    startNewChallenge,\r\n                    activeChallenge,\r\n                    resetChallenge,\r\n                    experienceToNextLevel,\r\n                    completeChallenge\r\n               }}>\r\n               {children}\r\n          </ChallengesContext.Provider>\r\n     );\r\n}"]},"metadata":{},"sourceType":"module"}