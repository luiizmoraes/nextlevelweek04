{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\NLW04\\\\Projeto01\\\\moveit-next\\\\src\\\\contexts\\\\CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 11\n  }, this);\n}","map":{"version":3,"sources":["C:/NLW04/Projeto01/moveit-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAyC;AAE3C,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,MAAM,EAAP,CAAhC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACW,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMa,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACrBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACJ;;AAED,WAASQ,cAAT,GAA0B;AACrBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACJ;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACX,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACrBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,MAAM;AAC/BZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACJ,OAF4B,EAE1B,IAF0B,CAA7B;AAGJ,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AAC9BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACrB;AACL,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACK,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAAEM,MAAAA,OAAF;AAAWG,MAAAA,OAAX;AAAoBL,MAAAA,WAApB;AAAiCF,MAAAA,QAAjC;AAA2CQ,MAAAA,cAA3C;AAA2DC,MAAAA;AAA3D,KAAlC;AAAA,cACMb;AADN;AAAA;AAAA;AAAA;AAAA,UADL;AAKJ","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\ninterface CountdownContextData {\r\n     minutes: number,\r\n     seconds: number,\r\n     hasFinished: boolean,\r\n     isActive: boolean,\r\n     startCountdown: () => void,\r\n     resetCountdown: () => void\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n     children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData);\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function CountdownProvider({ children }) {\r\n\r\n     const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n     const [time, setTime] = useState(0.1 * 60);\r\n     const [isActive, setIsActive] = useState(false);\r\n     const [hasFinished, setHasFinished] = useState(false);\r\n\r\n     const minutes = Math.floor(time / 60);\r\n     const seconds = time % 60;\r\n\r\n     function startCountdown() {\r\n          setIsActive(true);\r\n     }\r\n\r\n     function resetCountdown() {\r\n          clearTimeout(countdownTimeout);\r\n          setIsActive(false);\r\n          setTime(0.1 * 60);\r\n     }\r\n\r\n     useEffect(() => {\r\n          if (isActive && time > 0) {\r\n               countdownTimeout = setTimeout(() => {\r\n                    setTime(time - 1);\r\n               }, 1000)\r\n          } else if (isActive && time === 0) {\r\n               setHasFinished(true);\r\n               setIsActive(false);\r\n               startNewChallenge();\r\n          }\r\n     }, [isActive, time]);\r\n\r\n     return (\r\n          <CountdownContext.Provider value={{ minutes, seconds, hasFinished, isActive, startCountdown, resetCountdown }}>\r\n               {children}\r\n          </CountdownContext.Provider>\r\n     )\r\n}"]},"metadata":{},"sourceType":"module"}